// prisma/schema.prisma
datasource db {
  provider  = "mysql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  email                   String    @unique
  phoneNumber            String?   @unique
  emailVerified           DateTime?
  emailVerificationToken  String?   @unique
  emailVerificationExpires DateTime?
  otp                     String?
  otpExpires              DateTime?
  resetToken             String?   @unique
  resetTokenExpiry       DateTime?
  image                   String?
  hashedPassword          String?
  role                    String    @default("USER")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  courses                 Course[]
  purchases               Purchase[]
  userProgress            UserProgress[]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  attachments Attachment[]
  chapters Chapter[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String @db.Text
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  muxUploadId String?

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?
  uploadId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id        String   @id @default(uuid())
    userId    String
    chapterId String
    isCompleted Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    @@unique([userId, chapterId])
    @@index([chapterId])
}

model Purchase {
    id String @id @default(uuid())
    userId String
    courseId String
    status String @default("PENDING")
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Add relation to Payment
    payment Payment?

    @@unique([userId, courseId])
    @@index([courseId])
}

model Payment {
    id String @id @default(uuid())
    transactionReference String @unique
    amount Float
    currency String @default("EGP")
    status String
    purchaseId String @unique
    purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([transactionReference])
}